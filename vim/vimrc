" Vundle {{{
if !isdirectory($HOME . '/.vim/bundle/vundle')
  if executable('git')
    call mkdir($HOME . '/.vim/bundle', 'p')
    if has('win32') || has ('win64') " Fix for vimrun.exe on Windows
      silent execute '!"git clone https://github.com/gmarik/vundle.git "'
            \ . $HOME . '/.vim/bundle/vundle""'
    else
      silent execute '!git clone https://github.com/gmarik/vundle.git "'
            \ . $HOME . '/.vim/bundle/vundle"'
    endif
  else
    let choice =  confirm("You should get Git to be able to
          \ Install and Update. Continue?", "&Yes\n&No", 2)
    if choice == 2
      quit
    endif
  endif
  let s:bootstrap=1
endif

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'bling/vim-airline'
Bundle 'altercation/vim-colors-solarized'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-unimpaired'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-shell'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'OrangeT/vim-csharp'
Bundle 'trumpi/vim-razor'
Bundle 'reedes/vim-pencil'
Bundle 'sjl/splice.vim'
Bundle 'vim-scripts/taglist.vim'
Bundle 'docunext/closetag.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-surround'
Bundle 'ervandew/supertab'
Bundle 'maxbrunsfeld/vim-yankstack'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'kchmck/vim-coffee-script'
Bundle 'wavded/vim-stylus'
Bundle 'scrooloose/syntastic'
Bundle 'sjl/gundo.vim'
Bundle 'tpope/vim-dispatch'
Bundle 'vim-scripts/Conque-Shell'
Bundle 'edsono/vim-matchit'
Bundle 'xolox/vim-notes'
Bundle 'xolox/vim-session'
Bundle 'docunext/closetag.vim'
Bundle 'airblade/vim-gitgutter'
Bundle 'Yggdroot/indentLine'
Bundle 'ivyl/vim-bling'
Bundle 'davidoc/taskpaper.vim'
Bundle 'vim-scripts/marvim'
Bundle 'vim-scripts/xptemplate'
Bundle 'zhaocai/GoldenView.Vim'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'PProvost/vim-ps1'

if exists('s:bootstrap') && s:bootstrap
  redraw!
  unlet s:bootstrap
  silent BundleInstall
  quit
endif
" }}}
" Preamble {{{
" Needed on some linux distros.
" see http://www.adamlowe.me/2009/12/vim-destroys-all-other-rails-editors.html
au GUIEnter * simalt ~x "x on an English Windows version. n on a French one
filetype off
syntax on
filetype plugin indent on
set encoding=utf-8
set nobomb
set switchbuf+=usetab,newtab
set clipboard=unnamed " Use the system clipboard
set nocompatible
set autoread
let g:miniBufExplModSelTarget = 1
set backspace=indent,eol,start
set lazyredraw

set nobackup            " do not keep backups
set history=100         " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set incsearch           " do incremental searching
set expandtab
set shiftwidth=4
set tabstop=4
set helpheight=1000
set list
set noswapfile
set hlsearch
let mapleader=","

if has("gui_running")
  set number
endif

if has("gui_macvim")
  " write on pretty much any event (including :q)
  set autowriteall
  set tabpagemax=100
  set guifont=Monofur\ for\ Powerline:h18
endif

autocmd BufNewFile,BufRead *.css set fdm=marker fmr={,}

" Fuck tpope
xmap s <Plug>VSurround

hi IncSearch term=reverse
hi    Search term=reverse
hi    Visual term=reverse cterm=reverse ctermbg=9

if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  let &listchars = "tab:\u21e5\u00b7,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u26ad"
  let &fillchars = "vert:\u259a,fold:\u00b7"
else
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<
endif

set completeopt=menu,menuone,preview
set wildmode=longest,list:longest
set sessionoptions=buffers,curdir,folds,localoptions,resize,slash,tabpages,winpos,unix

"set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.storyboard,*.storyboardc,*/vendor/*,*/build/*

" set cursorcolumn " highlight the screen column of the cursor
" set cursorline   " highlight the screen line of the cursor

let g:shell_fullscreen_items = "mT"

setlocal numberwidth=3
" }}}
" Plugins {{{

" bling/vim-airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline_powerline_fonts = 0
let g:airline_theme='badwolf'

let g:airline_symbols = {}
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'
let g:airline_symbols.space = "\ua0"
" }}}
" altercation/vim-colors-solarized {{{
set background=dark
colorscheme solarized
" }}}
" kien/ctrlp.vim {{{
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_max_files=0
let g:ctrlp_map = '<D-p>'
let g:ctrlp_prompt_mappings = { 'AcceptSelection("e")': [], 'AcceptSelection("t")': ['<cr>', '<c-m>'], }
let g:ctrlp_working_path_mode = 'a'
noremap <C-p> :CtrlP<CR>
" }}}
" scroolose/nerdtree {{{
noremap <leader>n :NERDTreeTabsToggle<CR>
" }}}
" tpope/vim-fugitive {{{

" }}}
" tpope/vim-unimpaired {{{
" }}}
" Lokaltog/vim-easymotion {{{
" }}}
" xolox/vim-misc {{{
" }}}
" xolox/vim-shell {{{
" }}}
" jistr/vim-nerdtree-tabs {{{
" }}}
" OrangeT/vim-csharp {{{
" }}}
" trumpi/vim-razor {{{
" }}}
" reedes/vim-pencil {{{
let g:pencil#wrapModeDefault = 'hard'
let g:pencil#textwidth = 74
augroup pencil
  autocmd!
  autocmd filetype markdown call pencil#init()
  autocmd filetype textile call pencil#init()
  autocmd filetype text call pencil#init()
  autocmd filetype notes call pencil#init()
augroup END
" }}}
" sjl/splice.vim {{{
" }}}
" vim-scripts/taglist.vim {{{
let Tlist_Auto_Open = 0
let Tlist_Compact_Format = 1
let Tlist_Use_Right_Window = 1
" }}}
" docunext/closetag.vim {{{
" }}}
" scrooloose/nerdcommenter {{{
" }}}
" tpope/vim-surround {{{
let g:surround_40 = "(\r)"
let g:surround_91 = "[\r]"
let g:surround_60 = "<\r>"
" }}}
" ervandew/supertab {{{
" avoid key conflict
let g:SuperTabMappingForward = '<Plug>supertabKey'

" if nothing matched in xpt, try supertab
let g:xptemplate_fallback = '<Plug>supertabKey'
" }}}
" maxbrunsfeld/vim-yankstack {{{
let g:yankstack_map_keys = 0
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste
" }}}
" jelera/vim-javascript-syntax {{{
" }}}
" kchmck/vim-coffee-script {{{
" }}}
" wavded/vim-stylus {{{
" }}}
" scrooloose/syntastic {{{
" let g:syntastic_jshint_exec="C:\\Program Files\\nodejs\\node_modules\\.bin\\jshint.cmd"
let g:syntastic_javascript_checkers = ['jshint']
" }}}
" sjl/gundo.vim {{{
" }}}
" tpope/vim-dispatch {{{
" }}}
" vim-scripts/Conque-Shell {{{
" }}}
" edsono/vim-matchit {{{
" }}}
" xolox/vim-notes {{{
" }}}
" xolox/vim-session {{{
" }}}
" docunext/closetag.vim {{{
" }}}
" airblade/vim-gitgutter {{{
" }}}
" Yggdroot/indentLine {{{
" }}}
" ivyl/vim-bling {{{
" }}}
" davidoc/taskpaper.vim {{{
" }}}
" vim-scripts/marvim {{{
" }}}
" vim-scripts/xptemplate {{{
" xpt uses <Tab> as trigger key
let g:xptemplate_key = '<Tab>'

" use <tab>/<S-tab> to navigate through pum. Optional
let g:xptemplate_pum_tab_nav = 1

" xpt triggers only when you typed whole name of a snippet. Optional
let g:xptemplate_minimal_prefix = 'full'
let g:xptemplate_vars = "author=Trevor Green&email=trevor@trumpi.co.za&SPargs="
" }}}
" zhaocai/GoldenView.Vim {{{
let g:goldenview__enable_default_mapping = 0

nmap <silent> <C-n> <Plug>GoldenViewSplit
" }}}
" kien/rainbow_parentheses.vim {{{
" }}}
" PProvost/vim-ps1 {{{
" }}}
" }}}
" Other settings {{{
" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j
map <tab> %

" Exchange
nmap <C-j> ddp
nmap <C-k> ddkp

" Brace completion {{{
imap <leader>' ''<ESC>i
imap <leader>" ""<ESC>i
imap <leader>( ()<ESC>i
imap <leader>[ []<ESC>i
" }}}
" Next and Last {{{
"
" Motion for "next/last object".  "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"
" Next acts on the next object of the given type, last acts on the previous
" object of the given type.  These don't necessarily have to be in the current
" line.
"
" Currently works for (, [, {, and their shortcuts b, r, B.
"
" Next kind of works for ' and " as long as there are no escaped versions of
" them in the string (TODO: fix that).  Last is currently broken for quotes
" (TODO: fix that).
"
" Some examples (C marks cursor positions, V means visually selected):
"
" din'  -> delete in next single quotes                foo = bar('spam')
"                                                      C
"                                                      foo = bar('')
"                                                                C
"
" canb  -> change around next parens                   foo = bar('spam')
"                                                      C
"                                                      foo = bar
"                                                               C
"
" vin"  -> select inside next double quotes            print "hello ", name
"                                                       C
"                                                      print "hello ", name
"                                                             VVVVVV

onoremap an :<c-u>call <SID>NextTextObject('a', '/')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', '/')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', '/')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', '/')<cr>

onoremap al :<c-u>call <SID>NextTextObject('a', '?')<cr>
xnoremap al :<c-u>call <SID>NextTextObject('a', '?')<cr>
onoremap il :<c-u>call <SID>NextTextObject('i', '?')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', '?')<cr>


function! s:NextTextObject(motion, dir)
    let c = nr2char(getchar())
    let d = ''

    if c ==# "b" || c ==# "(" || c ==# ")"
        let c = "("
    elseif c ==# "B" || c ==# "{" || c ==# "}"
        let c = "{"
    elseif c ==# "r" || c ==# "[" || c ==# "]"
        let c = "["
    elseif c ==# "'"
        let c = "'"
    elseif c ==# '"'
        let c = '"'
    else
        return
    endif

    " Find the next opening-whatever.
    execute "normal! " . a:dir . c . "\<cr>"

    if a:motion ==# 'a'
        " If we're doing an 'around' method, we just need to select around it
        " and we can bail out to Vim.
        execute "normal! va" . c
    else
        " Otherwise we're looking at an 'inside' motion.  Unfortunately these
        " get tricky when you're dealing with an empty set of delimiters because
        " Vim does the wrong thing when you say vi(.

        let open = ''
        let close = ''

        if c ==# "("
            let open = "("
            let close = ")"
        elseif c ==# "{"
            let open = "{"
            let close = "}"
        elseif c ==# "["
            let open = "\\["
            let close = "\\]"
        elseif c ==# "'"
            let open = "'"
            let close = "'"
        elseif c ==# '"'
            let open = '"'
            let close = '"'
        endif

        " We'll start at the current delimiter.
        let start_pos = getpos('.')
        let start_l = start_pos[1]
        let start_c = start_pos[2]

        " Then we'll find it's matching end delimiter.
        if c ==# "'" || c ==# '"'
            " searchpairpos() doesn't work for quotes, because fuck me.
            let end_pos = searchpos(open)
        else
            let end_pos = searchpairpos(open, '', close)
        endif

        let end_l = end_pos[0]
        let end_c = end_pos[1]

        call setpos('.', start_pos)

        if start_l == end_l && start_c == (end_c - 1)
            " We're in an empty set of delimiters.  We'll append an "x"
            " character and select that so most Vim commands will do something
            " sane.  v is gonna be weird, and so is y.  Oh well.
            execute "normal! ax\<esc>\<left>"
            execute "normal! vi" . c
        elseif start_l == end_l && start_c == (end_c - 2)
            " We're on a set of delimiters that contain a single, non-newline
            " character.  We can just select that and we're done.
            execute "normal! vi" . c
        else
            " Otherwise these delimiters contain something.  But we're still not
            " sure Vim's gonna work, because if they contain nothing but
            " newlines Vim still does the wrong thing.  So we'll manually select
            " the guts ourselves.
            let whichwrap = &whichwrap
            set whichwrap+=h,l

            execute "normal! va" . c . "hol"

            let &whichwrap = whichwrap
        endif
    endif
endfunction

" }}}
" Comma stuff {{{
nmap di, f,dT,
nmap ci, f,cT,
nmap da, f,ld2T,
nmap ca, f,ld2T,i

noremap ds{ F{xf}x
noremap ds" F"x,x
noremap ds' F'x,x
noremap ds) F(xf)x
noremap ds( F(xf)x
noremap ds[ F[xf]x
noremap ds] F[xf]x
" }}}
" Tabs {{{
nmap <C-t> :tabe<CR>
nmap <C-TAB> :tabn<CR>
imap <C-TAB> <ESC>:tabn<CR>
" }}}
" Auto center screen on some jumps {{{
nmap G Gzz
nmap n nzz
nmap N Nzz
nmap } }zz
nmap { {zz
imap jj <ESC>
" }}}
nmap <C-l> <C-w>l
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k

nmap gO O<ESC>j
nmap go o<ESC>j

command! -complete=shellcmd -nargs=* R belowright 15new | r ! <args>

autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
" Source
vnoremap <leader>S y:execute @@<cr>:echo 'Sourced selection.'<cr>
nnoremap <leader>S ^vg_y:execute @@<cr>:echo 'Sourced line.'<cr>

" Quick-fix
nnoremap <leader>s :%s/\s\+$//g<cr>

" Text objects ------------------------------------------------------------ {{{

" Shortcut for [] {{{

onoremap ir i[
onoremap ar a[
vnoremap ir i[
vnoremap ar a[

" }}}
" Next and Last {{{
"
" Motion for "next/last object".  "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"
" Next acts on the next object of the given type, last acts on the previous
" object of the given type.  These don't necessarily have to be in the current
" line.
"
" Currently works for (, [, {, and their shortcuts b, r, B.
"
" Next kind of works for ' and " as long as there are no escaped versions of
" them in the string (TODO: fix that).  Last is currently broken for quotes
" (TODO: fix that).
"
" Some examples (C marks cursor positions, V means visually selected):
"
" din'  -> delete in next single quotes                foo = bar('spam')
"                                                      C
"                                                      foo = bar('')
"                                                                C
"
" canb  -> change around next parens                   foo = bar('spam')
"                                                      C
"                                                      foo = bar
"                                                               C
"
" vin"  -> select inside next double quotes            print "hello ", name
"                                                       C
"                                                      print "hello ", name
"                                                             VVVVVV

onoremap an :<c-u>call <SID>NextTextObject('a', '/')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', '/')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', '/')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', '/')<cr>

onoremap al :<c-u>call <SID>NextTextObject('a', '?')<cr>
xnoremap al :<c-u>call <SID>NextTextObject('a', '?')<cr>
onoremap il :<c-u>call <SID>NextTextObject('i', '?')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', '?')<cr>


function! s:NextTextObject(motion, dir)
    let c = nr2char(getchar())
    let d = ''

    if c ==# "b" || c ==# "(" || c ==# ")"
        let c = "("
    elseif c ==# "B" || c ==# "{" || c ==# "}"
        let c = "{"
    elseif c ==# "r" || c ==# "[" || c ==# "]"
        let c = "["
    elseif c ==# "'"
        let c = "'"
    elseif c ==# '"'
        let c = '"'
    else
        return
    endif

    " Find the next opening-whatever.
    execute "normal! " . a:dir . c . "\<cr>"

    if a:motion ==# 'a'
        " If we're doing an 'around' method, we just need to select around it
        " and we can bail out to Vim.
        execute "normal! va" . c
    else
        " Otherwise we're looking at an 'inside' motion.  Unfortunately these
        " get tricky when you're dealing with an empty set of delimiters because
        " Vim does the wrong thing when you say vi(.

        let open = ''
        let close = ''

        if c ==# "("
            let open = "("
            let close = ")"
        elseif c ==# "{"
            let open = "{"
            let close = "}"
        elseif c ==# "["
            let open = "\\["
            let close = "\\]"
        elseif c ==# "'"
            let open = "'"
            let close = "'"
        elseif c ==# '"'
            let open = '"'
            let close = '"'
        endif

        " We'll start at the current delimiter.
        let start_pos = getpos('.')
        let start_l = start_pos[1]
        let start_c = start_pos[2]

        " Then we'll find it's matching end delimiter.
        if c ==# "'" || c ==# '"'
            " searchpairpos() doesn't work for quotes, because fuck me.
            let end_pos = searchpos(open)
        else
            let end_pos = searchpairpos(open, '', close)
        endif

        let end_l = end_pos[0]
        let end_c = end_pos[1]

        call setpos('.', start_pos)

        if start_l == end_l && start_c == (end_c - 1)
            " We're in an empty set of delimiters.  We'll append an "x"
            " character and select that so most Vim commands will do something
            " sane.  v is gonna be weird, and so is y.  Oh well.
            execute "normal! ax\<esc>\<left>"
            execute "normal! vi" . c
        elseif start_l == end_l && start_c == (end_c - 2)
            " We're on a set of delimiters that contain a single, non-newline
            " character.  We can just select that and we're done.
            execute "normal! vi" . c
        else
            " Otherwise these delimiters contain something.  But we're still not
            " sure Vim's gonna work, because if they contain nothing but
            " newlines Vim still does the wrong thing.  So we'll manually select
            " the guts ourselves.
            let whichwrap = &whichwrap
            set whichwrap+=h,l

            execute "normal! va" . c . "hol"

            let &whichwrap = whichwrap
        endif
    endif
endfunction

" }}}
" Numbers {{{

" Motion for numbers.  Great for CSS.  Lets you do things like this:
"
" margin-top: 200px; -> daN -> margin-top: px;
"              ^                          ^
" TODO: Handle floats.

onoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
xnoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
onoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
onoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>

function! s:NumberTextObject(whole)
    normal! v

    while getline('.')[col('.')] =~# '\v[0-9]'
        normal! l
    endwhile

    if a:whole
        normal! o

        while col('.') > 1 && getline('.')[col('.') - 2] =~# '\v[0-9]'
            normal! h
        endwhile
    endif
endfunction

" }}}

" }}}
" Quickedit {{{
nnoremap <leader>ev :tabe $MYVIMRC<cr>
" }}}

noremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>
" }}}
" Folding {{{
" Enter to toggle folds.
nnoremap <cr> za
vnoremap <cr> za

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()
" }}}
" Filetypes {{{
" Vim {{{

augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}
" }}}
