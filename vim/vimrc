" Needed on some linux distros.
" see http://www.adamlowe.me/2009/12/vim-destroys-all-other-rails-editors.html
au GUIEnter * simalt ~x "x on an English Windows version. n on a French one
filetype off

if !isdirectory($HOME . '/.vim/bundle/vundle')
  if executable('git')
    call mkdir($HOME . '/.vim/bundle', 'p')
    if has('win32') || has ('win64') " Fix for vimrun.exe on Windows
      silent execute '!"git clone https://github.com/gmarik/vundle.git "'
            \ . $HOME . '/.vim/bundle/vundle""'
    else
      silent execute '!git clone https://github.com/gmarik/vundle.git "'
            \ . $HOME . '/.vim/bundle/vundle"'
    endif
  else
    let choice =  confirm("You should get Git to be able to
          \ Install and Update. Continue?", "&Yes\n&No", 2)
    if choice == 2
      quit
    endif
  endif
  let s:bootstrap=1
endif

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'bling/vim-airline'
Bundle 'altercation/vim-colors-solarized'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-fugitive'
Bundle 'msanders/snipmate.vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-shell'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'OrangeT/vim-csharp'
Bundle 'trumpi/vim-razor'
Bundle 'wikitopian/hardmode'
Bundle 'reedes/vim-pencil'
Bundle 'sjl/splice.vim'
Bundle 'vim-scripts/taglist.vim'
Bundle 'docunext/closetag.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'vim-scripts/supertab.git'
Bundle 'tpope/vim-surround'
Bundle 'vim-scripts/YankRing.vim'

if exists('s:bootstrap') && s:bootstrap
  redraw!
  unlet s:bootstrap
  silent BundleInstall
  quit
endif

syntax on
set background=dark
colorscheme solarized
filetype plugin indent on
set encoding=utf-8
set nobomb
set switchbuf+=usetab,newtab
let g:miniBufExplModSelTarget = 1

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 0
let g:airline_theme='badwolf'

let g:airline_symbols = {}
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'
let g:airline_symbols.space = "\ua0"

" CTRL-P
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_multiple_files = 't'
let g:ctrlp_map = '<D-p>'
let g:ctrlp_prompt_mappings = { 'AcceptSelection("e")': [], 'AcceptSelection("t")': ['<cr>', '<c-m>'], }
let g:ctrlp_working_path_mode = 'a'

set clipboard=unnamed " Use the system clipboard
set nocompatible
set autoread

let g:rails_menu=2
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

" Better surround
let g:surround_40 = "(\r)"
let g:surround_91 = "[\r]"
let g:surround_60 = "<\r>"

let g:acp_ignorecaseOption = 0

let g:SuperTabLongestEnhanced = 1
let g:SuperTabLongestHighlight = 1
let g:SuperTabCrClosePreview = 1

set backspace=indent,eol,start

set nobackup            " do not keep backups
set history=100         " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set incsearch           " do incremental searching
set expandtab
set shiftwidth=2
set tabstop=2
set helpheight=1000
set list
set noswapfile

if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  let &listchars = "tab:\u21e5\u00b7,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u26ad"
  let &fillchars = "vert:\u259a,fold:\u00b7"
else
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<
endif

set completeopt=menu,menuone,preview
set wildmode=longest,list:longest
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.storyboard,*.storyboardc,*/vendor/*,*/build/*

" set cursorcolumn " highlight the screen column of the cursor
" set cursorline   " highlight the screen line of the cursor

let g:shell_fullscreen_items = "mT"

setlocal numberwidth=3

" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

set hlsearch

if has("gui_running")
  set number
endif

if has("gui_macvim")
  " write on pretty much any event (including :q)
  set autowriteall
  set tabpagemax=100
  set guifont=Monofur\ for\ Powerline:h18
endif

autocmd BufNewFile,BufRead *.css set fdm=marker fmr={,}

" Fuck tpope
xmap s <Plug>VSurround

hi IncSearch term=reverse
hi    Search term=reverse
hi    Visual term=reverse cterm=reverse ctermbg=9

" Exchange
nmap <A-j> ddp
nmap <A-k> ddkp
" nmap <A-w> "wdiw"sdlw"sP"wp

" Brace completion
imap <leader>' ''<ESC>i
imap <leader>" ""<ESC>i
imap <leader>( ()<ESC>i
imap <leader>[ []<ESC>i

" Comma stuff
nmap di, f,dT,
nmap ci, f,cT,
nmap da, f,ld2T,
nmap ca, f,ld2T,i

noremap ds{ F{xf}x
noremap ds" F"x,x
noremap ds' F'x,x
noremap ds) F(xf)x
noremap ds( F(xf)x
noremap ds[ F[xf]x
noremap ds] F[xf]x

" Tabs
nmap <C-t> :tabe<CR>
nmap <C-l> :tabn<CR>
nmap <C-h> :tabp<CR>

" Auto center screen on some jumps
nmap G Gzz
nmap n nzz
nmap N Nzz
nmap } }zz
nmap { {zz
imap jj <ESC>

nmap gO O<ESC>j
nmap go o<ESC>j

command! -complete=shellcmd -nargs=* R belowright 15new | r ! <args>

noremap <leader>n :NERDTreeTabsToggle<CR>

autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
noremap <C-p> :CtrlP<CR>

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

let Tlist_Auto_Open = 1
let Tlist_Compact_Format = 1
let Tlist_Use_Right_Window = 1
TlistOpen
